{"ast":null,"code":"import React from \"react\";\n\nconst RenderMovieList = (event, api) => {\n  //storing the event\n  let searchField = event.target.value; // storing the URL for searching movies\n\n  const movieSearch = \"https://api.themoviedb.org/3/search/movie?api_key=\" + api + \"&language=en-US&query=\" + searchField + \"&page=1&include_adult=false\"; // creating my promise    \n\n  const promise = new Promise((resolve, reject) => {\n    const catchData = fetch(movieSearch);\n    resolve(catchData);\n  }); // converting the data to json data\n\n  promise.then(response => response.json()) //converting the data to a object\n  .then(data => {\n    console.log(data); // grabbed the div tag from the Movie.js\n\n    const movieDiv = document.getElementById(\"movieDiv\");\n    movieDiv.innerHTML = \"\"; // movieDiv.innerHTML=\"\"\n    // create p tag for movie over view\n\n    const movieOverView = document.createElement(\"p\");\n    movieOverView.innerHTML = \"\"; // create p tag for movie title\n\n    const movieTilte = document.createElement(\"p\");\n    movieTilte.innerHTML = \"\";\n    const movieImage = document.createElement(\"img\");\n    const movieReleaseDate = document.createElement(\"p\"); // filter through the list of objects        \n\n    let filteredMovieData = data.results.filter(movie => {\n      return movie.title === searchField;\n    }); // printing off the list of objects\n\n    filteredMovieData.forEach(movie => {\n      movieImage.setAttribute(\"src\", \"https://image.tmdb.org/t/p/w300/\" + movie.poster_path);\n      movieImage.setAttribute(\"alt\", \"Sorry, there are problems with the image\");\n      movieTilte.innerHTML = \"<Strong>Title: </Strong>\" + movie.title;\n      movieOverView.innerHTML = \"<Strong>Movie Overview: </Strong>\" + movie.overview;\n      movieReleaseDate.innerHTML = \"<Strong> Released: \" + movie.release_date + \"</Strong>\";\n      movieDiv.appendChild(movieTilte);\n      movieDiv.appendChild(movieOverView);\n      movieDiv.appendChild(movieImage);\n      movieDiv.appendChild(movieReleaseDate);\n      console.log(movieTilte);\n      console.log(movieOverView);\n      new Promise((resolve, reject) => {\n        const actorData = fetch(\"https://api.themoviedb.org/3/movie/\" + movie.id + \"/credits?api_key=\" + api);\n        resolve(actorData);\n      }).then(response => response.json()).then(data => {\n        data.cast.forEach(data => {\n          const actorP = document.createElement(\"p\");\n          const actorRole = document.createElement(\"p\");\n          const actorPicture = document.createElement(\"img\");\n          actorPicture.setAttribute(\"src\", \"https://image.tmdb.org/t/p/w300/\" + data.profile_path);\n          actorRole.innerHTML = \"Role: \" + data.character;\n          actorP.innerHTML = \"Crew: \" + data.name;\n          movieDiv.appendChild(actorP);\n          movieDiv.appendChild(actorRole);\n          movieDiv.appendChild(actorPicture);\n          console.log(data);\n        });\n      });\n    });\n  });\n};\n\nexport default RenderMovieList;","map":{"version":3,"sources":["/Users/bmogy/Documents/Web Development/React/movie-app/movie-app/src/Layout/Body/Movie/MovieFunctions/MovieFunctions.js"],"names":["React","RenderMovieList","event","api","searchField","target","value","movieSearch","promise","Promise","resolve","reject","catchData","fetch","then","response","json","data","console","log","movieDiv","document","getElementById","innerHTML","movieOverView","createElement","movieTilte","movieImage","movieReleaseDate","filteredMovieData","results","filter","movie","title","forEach","setAttribute","poster_path","overview","release_date","appendChild","actorData","id","cast","actorP","actorRole","actorPicture","profile_path","character","name"],"mappings":"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","sourcesContent":["import React from \"react\"\nconst RenderMovieList = (event,api) => {\n\n        //storing the event\n        \n        let searchField = event.target.value\n\n        // storing the URL for searching movies\n       const movieSearch = \"https://api.themoviedb.org/3/search/movie?api_key=\" + api + \"&language=en-US&query=\" + searchField +\"&page=1&include_adult=false\"\n        // creating my promise    \n       const promise = new Promise((resolve,reject)=>{\n            const catchData =  fetch(movieSearch)\n            resolve(catchData);\n       })\n       // converting the data to json data\n       promise.then((response)=>response.json())\n       //converting the data to a object\n       .then((data)=>{\n           console.log(data)\n        // grabbed the div tag from the Movie.js\n        const movieDiv = document.getElementById(\"movieDiv\");\n        movieDiv.innerHTML =\"\"\n       // movieDiv.innerHTML=\"\"\n       // create p tag for movie over view\n        const movieOverView =document.createElement(\"p\")\n        movieOverView.innerHTML =\"\"\n        // create p tag for movie title\n        const movieTilte = document.createElement(\"p\")\n        movieTilte.innerHTML =\"\"\n        const movieImage = document.createElement(\"img\");\n        const movieReleaseDate = document.createElement(\"p\");\n        // filter through the list of objects        \n            let filteredMovieData = data.results.filter((movie)=>{\n                    return  movie.title === searchField\n            })\n         \n\n            // printing off the list of objects\n            filteredMovieData.forEach((movie)=>{\n                movieImage.setAttribute(\"src\",\"https://image.tmdb.org/t/p/w300/\" + movie.poster_path)\n                movieImage.setAttribute(\"alt\",\"Sorry, there are problems with the image\")\n                movieTilte.innerHTML=\"<Strong>Title: </Strong>\" + movie.title\n                movieOverView.innerHTML =\"<Strong>Movie Overview: </Strong>\" + movie.overview\n                movieReleaseDate.innerHTML= \"<Strong> Released: \" +  movie.release_date+ \"</Strong>\"\n                movieDiv.appendChild(movieTilte)\n                movieDiv.appendChild(movieOverView)\n                movieDiv.appendChild(movieImage)\n                movieDiv.appendChild(movieReleaseDate)\n                console.log(movieTilte)\n                console.log(movieOverView)\n                new Promise((resolve,reject)=>{\n                    const actorData = fetch(\"https://api.themoviedb.org/3/movie/\"+ movie.id+\"/credits?api_key=\" + api)\n                    resolve(actorData)\n                }).then((response)=> response.json())\n                .then((data)=>{\n                    data.cast.forEach((data)=>{\n                        const actorP = document.createElement(\"p\");\n                        const actorRole = document.createElement(\"p\")\n                        const actorPicture = document.createElement(\"img\")\n                        actorPicture.setAttribute(\"src\",\"https://image.tmdb.org/t/p/w300/\" + data.profile_path)\n                        actorRole.innerHTML= \"Role: \" + data.character \n                        actorP.innerHTML = \"Crew: \" +  data.name\n                        movieDiv.appendChild(actorP)\n                        movieDiv.appendChild(actorRole)\n                        movieDiv.appendChild(actorPicture)\n\n                        console.log(data)\n                    })\n                })\n            })\n       \n       })\n    \n}\nexport default RenderMovieList"]},"metadata":{},"sourceType":"module"}