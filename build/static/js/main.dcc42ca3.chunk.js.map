{"version":3,"sources":["Layout/Header/Header.js","Layout/Body/Movie/Movie.js","Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","Movie","htmlFor","id","type","placeholder","onChange","inputHandler","Layout","state","apiKey","storedDate","event","searchField","target","value","movieSearch","Promise","resolve","reject","fetch","then","response","json","data","movieDiv","document","getElementById","movieOverView","createElement","innerHTML","movieTilte","results","filter","movie","console","log","title","original_title","forEach","overview","appendChild","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2RAUeA,G,YAPA,SAACC,GAChB,OACI,yBAAKC,UAAW,iBCMLC,EATD,SAACF,GACX,OACI,6BACI,2BAAOG,QAAQ,SAAf,UACA,2BAAOC,GAAG,QAAQC,KAAK,OAAOC,YAAY,gCAAgCC,SAAUP,EAAMQ,eACzF,yBAAKJ,GAAG,eCwDNK,E,4MAzDXC,MAAQ,CACJC,OAAO,mCACPC,WAAW,I,EAGfJ,aAAgB,SAACK,GAEZ,IAAIC,EAAcD,EAAME,OAAOC,MAG3BC,EAAc,qDAAuD,EAAKP,MAAMC,OAAS,yBAA2BG,EAAa,8BAEvH,IAAII,SAAQ,SAACC,EAAQC,GAEhCD,EADmBE,MAAMJ,OAItBK,MAAK,SAACC,GAAD,OAAYA,EAASC,UAEjCF,MAAK,SAACG,GAEN,IAAMC,EAAWC,SAASC,eAAe,YAGnCC,EAAeF,SAASG,cAAc,KAC5CD,EAAcE,UAAW,GAEzB,IAAMC,EAAaL,SAASG,cAAc,KAC1CE,EAAWD,UAAW,GAEQN,EAAKQ,QAAQC,QAAO,SAACC,GAEvC,OADJC,QAAQC,IAAIF,EAAMG,OACPH,EAAMI,iBAAkBzB,KAIrB0B,SAAQ,SAACL,GACvBH,EAAWD,UAAU,2BAA6BI,EAAMG,MACxDT,EAAcE,UAAW,oCAAsCI,EAAMM,SACrEf,EAASgB,YAAYV,GACrBN,EAASgB,YAAYb,GACrBO,QAAQC,IAAIL,GACZI,QAAQC,IAAIR,U,uDAOpB,OACI,6BACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOrB,aAAcmC,KAAKnC,oB,GAtDjBoC,aCYNC,E,uKATP,OACE,yBAAK5C,UAAU,OACb,kBAAC,EAAD,W,GALM2C,aCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1B,SAASC,eAAe,SDyHpB,kBAAmB0B,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.dcc42ca3.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./Header.css\"\n\nconst Header = (props) => {\nreturn (\n    <div className =\"mainHeader\">\n\n    </div>\n)\n}\nexport default Header","import React from \"react\";\n\nconst Movie = (props) => {\n    return (\n        <div>\n            <label htmlFor=\"movie\">Movie:</label>\n            <input id=\"movie\" type=\"text\" placeholder=\"Please type a nmae of a movie\" onChange={props.inputHandler}></input>\n             <div id=\"movieDiv\"></div>\n        </div>\n    )\n}\nexport default Movie","import React, {Component} from \"react\";\nimport Header from \"./Header/Header\"\nimport Movie from \"./Body/Movie/Movie\"\n\nclass Layout extends Component{\n    // creatong the states\n    state = {\n        apiKey:\"b2f49c297ee42a377615666c4da25acf\",\n        storedDate:[]\n    }\n    // creating input hnadler function where it will pull from the movie dba apt anytime someone types something\n    inputHandler =  (event) => {\n        //storing the event\n         let searchField = event.target.value\n\n        // storing the URL for searching movies\n       const movieSearch = \"https://api.themoviedb.org/3/search/movie?api_key=\" + this.state.apiKey + \"&language=en-US&query=\" + searchField +\"&page=1&include_adult=false\"\n        // creating my promise    \n       const promise = new Promise((resolve,reject)=>{\n            const catchData =  fetch(movieSearch)\n            resolve(catchData);\n       })\n       // converting the data to json data\n       promise.then((response)=>response.json())\n       //converting the data to a object\n       .then((data)=>{\n        // grabbed the div tag from the Movie.js\n        const movieDiv = document.getElementById(\"movieDiv\");\n       // movieDiv.innerHTML=\"\"\n       // create p tag for movie over view\n        const movieOverView =document.createElement(\"p\")\n        movieOverView.innerHTML =\"\"\n        // create p tag for movie title\n        const movieTilte = document.createElement(\"p\")\n        movieTilte.innerHTML =\"\"\n        // filter through the list of objects        \n            const filteredMovieData = data.results.filter((movie)=>{\n                console.log(movie.title)\n                    return movie.original_title=== searchField\n                \n            })\n            // printing off the list of objects\n            filteredMovieData.forEach((movie)=>{\n                movieTilte.innerHTML=\"<Strong>Title: </Strong>\" + movie.title\n                movieOverView.innerHTML =\"<Strong>Movie Overview: </Strong>\" + movie.overview\n                movieDiv.appendChild(movieTilte)\n                movieDiv.appendChild(movieOverView)\n                console.log(movieTilte)\n                console.log(movieOverView)\n\n            })\n       })\n    }\n    render(){\n    \n        return (\n            <div>\n            <Header></Header>\n            <Movie inputHandler={this.inputHandler}></Movie>\n            </div>\n        )\n    }\n}\nexport default Layout","import React, { Component } from 'react';\nimport './App.css';\nimport Layout from \"./Layout/Layout\"\n\nclass App extends Component {\n\n  render(){\n        return (\n          <div className=\"App\">\n            <Layout></Layout>\n          </div>\n        )\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}