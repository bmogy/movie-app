{"ast":null,"code":"var _jsxFileName = \"/Users/bmogy/Documents/Web Development/React/movie-app/movie-app/src/Layout/Layout.js\";\nimport React, { Component } from \"react\";\nimport Header from \"./Header/Header\";\nimport Movie from \"./Body/Movie/Movie\";\nimport TV from \"./Body/TV/TV\";\n\nconst RenderMovieList = require(\"./Body/Movie/MovieFunctions/MovieFunctions\");\n\nclass Layout extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      apiKey: \"b2f49c297ee42a377615666c4da25acf\",\n      storedDate: []\n    };\n\n    this.inputHandler = event => {\n      //storing the event\n      let searchField = event.target.value; // storing the URL for searching movies\n\n      const movieSearch = \"https://api.themoviedb.org/3/search/movie?api_key=\" + this.state.apiKey + \"&language=en-US&query=\" + searchField + \"&page=1&include_adult=false\"; // creating my promise    \n\n      const promise = new Promise((resolve, reject) => {\n        const catchData = fetch(movieSearch);\n        resolve(catchData);\n      }); // converting the data to json data\n\n      promise.then(response => response.json()) //converting the data to a object\n      .then(data => {\n        console.log(data); // grabbed the div tag from the Movie.js\n\n        const movieDiv = document.getElementById(\"movieDiv\");\n        movieDiv.innerHTML = \"\"; // movieDiv.innerHTML=\"\"\n        // create p tag for movie over view\n\n        const movieOverView = document.createElement(\"p\");\n        movieOverView.innerHTML = \"\"; // create p tag for movie title\n\n        const movieTilte = document.createElement(\"p\");\n        movieTilte.innerHTML = \"\";\n        const movieImage = document.createElement(\"img\");\n        const movieReleaseDate = document.createElement(\"p\"); // filter through the list of objects        \n\n        let filteredMovieData = data.results.filter(movie => {\n          return movie.title === searchField;\n        }); // printing off the list of objects\n\n        filteredMovieData.forEach(movie => {\n          movieImage.setAttribute(\"src\", \"https://image.tmdb.org/t/p/w300/\" + movie.poster_path);\n          movieImage.setAttribute(\"alt\", \"Sorry, there are problems with the image\");\n          movieTilte.innerHTML = \"<Strong>Title: </Strong>\" + movie.title;\n          movieOverView.innerHTML = \"<Strong>Movie Overview: </Strong>\" + movie.overview;\n          movieReleaseDate.innerHTML = \"<Strong> Released: \" + movie.release_date + \"</Strong>\";\n          movieDiv.appendChild(movieTilte);\n          movieDiv.appendChild(movieOverView);\n          movieDiv.appendChild(movieImage);\n          movieDiv.appendChild(movieReleaseDate);\n          console.log(movieTilte);\n          console.log(movieOverView);\n          new Promise((resolve, reject) => {\n            const actorData = fetch(\"https://api.themoviedb.org/3/movie/\" + movie.id + \"/credits?api_key=\" + this.state.apiKey);\n            resolve(actorData);\n          }).then(response => response.json()).then(data => {\n            data.cast.forEach(data => {\n              const actorP = document.createElement(\"p\");\n              const actorRole = document.createElement(\"p\");\n              const actorPicture = document.createElement(\"img\");\n              actorPicture.setAttribute(\"src\", \"https://image.tmdb.org/t/p/w300/\" + data.profile_path);\n              actorRole.innerHTML = \"Role: \" + data.character;\n              actorP.innerHTML = \"Crew: \" + data.name;\n              movieDiv.appendChild(actorP);\n              movieDiv.appendChild(actorRole);\n              movieDiv.appendChild(actorPicture);\n              console.log(data);\n            });\n          });\n        });\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Movie, {\n      inputHandler: this.inputHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(TV, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default Layout;","map":{"version":3,"sources":["/Users/bmogy/Documents/Web Development/React/movie-app/movie-app/src/Layout/Layout.js"],"names":["React","Component","Header","Movie","TV","RenderMovieList","require","Layout","state","apiKey","storedDate","inputHandler","event","searchField","target","value","movieSearch","promise","Promise","resolve","reject","catchData","fetch","then","response","json","data","console","log","movieDiv","document","getElementById","innerHTML","movieOverView","createElement","movieTilte","movieImage","movieReleaseDate","filteredMovieData","results","filter","movie","title","forEach","setAttribute","poster_path","overview","release_date","appendChild","actorData","id","cast","actorP","actorRole","actorPicture","profile_path","character","name","render"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Header from \"./Header/Header\"\nimport Movie from \"./Body/Movie/Movie\"\nimport TV from \"./Body/TV/TV\"\nconst RenderMovieList = require(\"./Body/Movie/MovieFunctions/MovieFunctions\")\n\nclass Layout extends Component{\n    // creatong the states\n    state = {\n        apiKey:\"b2f49c297ee42a377615666c4da25acf\",\n        storedDate:[]\n    }\n    // creating input hnadler function where it will pull from the movie dba apt anytime someone types something\n    inputHandler =  (event) => {\n        //storing the event\n        \n         let searchField = event.target.value\n\n        // storing the URL for searching movies\n       const movieSearch = \"https://api.themoviedb.org/3/search/movie?api_key=\" + this.state.apiKey + \"&language=en-US&query=\" + searchField +\"&page=1&include_adult=false\"\n        // creating my promise    \n       const promise = new Promise((resolve,reject)=>{\n            const catchData =  fetch(movieSearch)\n            resolve(catchData);\n       })\n       // converting the data to json data\n       promise.then((response)=>response.json())\n       //converting the data to a object\n       .then((data)=>{\n           console.log(data)\n        // grabbed the div tag from the Movie.js\n        const movieDiv = document.getElementById(\"movieDiv\");\n        movieDiv.innerHTML =\"\"\n       // movieDiv.innerHTML=\"\"\n       // create p tag for movie over view\n        const movieOverView =document.createElement(\"p\")\n        movieOverView.innerHTML =\"\"\n        // create p tag for movie title\n        const movieTilte = document.createElement(\"p\")\n        movieTilte.innerHTML =\"\"\n        const movieImage = document.createElement(\"img\");\n        const movieReleaseDate = document.createElement(\"p\");\n        // filter through the list of objects        \n            let filteredMovieData = data.results.filter((movie)=>{\n                    return  movie.title === searchField\n            })\n         \n\n            // printing off the list of objects\n            filteredMovieData.forEach((movie)=>{\n                movieImage.setAttribute(\"src\",\"https://image.tmdb.org/t/p/w300/\" + movie.poster_path)\n                movieImage.setAttribute(\"alt\",\"Sorry, there are problems with the image\")\n                movieTilte.innerHTML=\"<Strong>Title: </Strong>\" + movie.title\n                movieOverView.innerHTML =\"<Strong>Movie Overview: </Strong>\" + movie.overview\n                movieReleaseDate.innerHTML= \"<Strong> Released: \" +  movie.release_date+ \"</Strong>\"\n                movieDiv.appendChild(movieTilte)\n                movieDiv.appendChild(movieOverView)\n                movieDiv.appendChild(movieImage)\n                movieDiv.appendChild(movieReleaseDate)\n                console.log(movieTilte)\n                console.log(movieOverView)\n                new Promise((resolve,reject)=>{\n                    const actorData = fetch(\"https://api.themoviedb.org/3/movie/\"+ movie.id+\"/credits?api_key=\" + this.state.apiKey)\n                    resolve(actorData)\n                }).then((response)=> response.json())\n                .then((data)=>{\n                    data.cast.forEach((data)=>{\n                        const actorP = document.createElement(\"p\");\n                        const actorRole = document.createElement(\"p\")\n                        const actorPicture = document.createElement(\"img\")\n                        actorPicture.setAttribute(\"src\",\"https://image.tmdb.org/t/p/w300/\" + data.profile_path)\n                        actorRole.innerHTML= \"Role: \" + data.character \n                        actorP.innerHTML = \"Crew: \" +  data.name\n                        movieDiv.appendChild(actorP)\n                        movieDiv.appendChild(actorRole)\n                        movieDiv.appendChild(actorPicture)\n\n                        console.log(data)\n                    })\n                })\n            })\n       \n       })\n       \n    }\n    render(){\n        return (\n            <div>\n            <Header></Header>\n            <Movie inputHandler={this.inputHandler}></Movie>\n            <TV></TV>\n            </div>\n        )\n    }\n}\nexport default Layout"]},"metadata":{},"sourceType":"module"}